# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|

  # select our box
  #config.vm.box = "debian/testing64"
  config.vm.box = "local/debian-12-bookworm-amd64"

  # set hostname
  config.vm.hostname = "bookworm"

  # you can change these and reboot the vm with `vagrant reload`
  # for info on the available options to the libvirt provisioner check https://vagrant-libvirt.github.io/vagrant-libvirt/configuration.html
  config.vm.provider :libvirt do |libvirt|
    #libvirt.memory = 1280
    libvirt.memory = 2048
    libvirt.cpus = 2

    libvirt.sound_type = "ich6"

    #libvirt.graphics_port = 5900 # bad idea because it may collide with other existing vms
    libvirt.graphics_autoport = 'yes'
    # SLOW
    #libvirt.graphics_type = "spice" # vnc also works but is slower
    #libvirt.video_type = "virtio"
    #libvirt.video_accel3d = true # ATM not working with spice, only vnc
    #libvirt.graphics_gl = true # ATM not working in vagrant (maybe it's an host issue); libvirt says it only works with spice not vnc
    # FAST
    libvirt.graphics_type = "spice"
    libvirt.video_type = "qxl"

    libvirt.channel :type  => 'spicevmc', :target_name => 'com.redhat.spice.0',     :target_type => 'virtio' # copy-paste between guest and host
    libvirt.channel :type  => 'unix',     :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio' # qemu agent
    libvirt.random  :model => 'random' # passthrough /dev/random to your VM
  end

  # set credentials (only required if Vagrant's insecure keypair wasn't added during box creation)
  if config.vm.box.start_with?('local/')
    config.ssh.username = "replicant"
    #config.ssh.password = "..."
  end

  # set text to be shown after 'vagrant up'
  # this text can be useful for detailing instructions how to access the development environment
  #config.vm.post_up_message = "A Vagrant tutorial can be found at http://alexconst.github.io/"

  # NOTE: by default, unless NFS is detected on the host, the folder shares are only a one time host-to-guest rsync
  # Furthermore, due to a mismatch issue (between Debian and Vagrant), when using NFS we need to be explicit
  #config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.synced_folder '.', '/vagrant', type: "nfs", nfs_version: "3", nfs_udp: false
  host_folder = ENV['HOME'] + '/data/home/work_lab/working_shares/share_vagrant/2023'
  guest_folder = '/vagrant_share'
  config.vm.synced_folder host_folder, guest_folder, type: "nfs", nfs_version: "3", nfs_udp: false
  # NOTE: latest Debian breaks Vagrant NFS support, because Vagrant always adds the `vers=` option... maybe one day this will work:
  #config.vm.synced_folder '.', '/vagrant', mount_options: ['mountvers=4.2'], type: "nfs", nfs_udp: false

  # configure the network: set up port forwarding for TCP
  # accessing port 8080 on the host will be forwarded to port 80 on the guest
  #config.vm.network "forwarded_port", host: 8080, guest: 80

  # configure the network: set up port forwarding for both UDP and TCP
  #config.vm.network "forwarded_port", host: 12003, guest: 2003, protocol: "tcp"
  #config.vm.network "forwarded_port", host: 12003, guest: 2003, protocol: "udp"

  # provision done by uploading a script and executing it (path can be an URL)
  #config.vm.provision :shell, :path => "bootstrap.sh", :args => "'first arg' second"
  config.vm.provision "shell", path: "scripts/10-base.sh"

end
